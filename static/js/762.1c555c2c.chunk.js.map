{"version":3,"file":"static/js/762.1c555c2c.chunk.js","mappings":"qNAAaA,EAAe,CACxBC,KAAM,GACNC,MAAO,GACPC,SAAU,ICHDC,EACH,CACFC,MAAO,OACPJ,KAAM,OACNK,KAAM,OACNC,YAAa,aACbC,UAAU,GANLJ,EAQF,CACHC,MAAO,QACPJ,KAAM,QACNK,KAAM,QACNC,YAAa,cACbC,UAAU,GAbLJ,EAeC,CACNC,MAAO,WACPJ,KAAM,WACNK,KAAM,WACNC,YAAa,iBACbC,UAAU,G,mBCGlB,EAfqB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACpB,GAA8CC,EAAAA,EAAAA,GAAQ,CAAED,SAAAA,EAAUT,aAAAA,IAA1DW,EAAR,EAAQA,MAAOC,EAAf,EAAeA,aAAcC,EAA7B,EAA6BA,aAErBZ,EAA0BU,EAA1BV,KAAMC,EAAoBS,EAApBT,MAAOC,EAAaQ,EAAbR,SAErB,OACI,kBAAMM,SAAUI,EAAhB,WACI,SAACC,EAAA,GAAD,QAAWC,MAAOd,EAAMe,SAAUJ,GAAkBR,KACpD,SAACU,EAAA,GAAD,QAAWC,MAAOb,EAAOc,SAAUJ,GAAkBR,KACrD,SAACU,EAAA,GAAD,QAAWC,MAAOZ,EAAUa,SAAUJ,GAAkBR,KACxD,SAACa,EAAA,EAAD,CAAQC,KAAK,WAAWZ,KAAK,SAA7B,wBAGX,E,8BCCD,MAhBA,WACI,IAAMa,GAAWC,EAAAA,EAAAA,MAOjB,OACI,6BACI,4CACA,SAAC,EAAD,CAAcX,SARL,SAACY,GAEdF,GAASG,EAAAA,EAAAA,GAAOD,GACnB,MAQJ,C,+ECnBD,EAAwB,0BAAxB,EAA0D,0BAA1D,EAA4F,0B,SCItFP,EAAY,SAAC,GAAmE,IAAjET,EAAgE,EAAhEA,MAAOJ,EAAyD,EAAzDA,KAAMc,EAAmD,EAAnDA,MAAOC,EAA4C,EAA5CA,SAAUT,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,SAAUF,EAAW,EAAXA,KAChEiB,GAAKC,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IAEnC,OACI,iBAAKC,UAAWC,EAAhB,UACKtB,IAAS,mBAAOqB,UAAWC,EAAcC,QAASL,EAAzC,UAA8ClB,EAA9C,SACV,kBAAOqB,UAAWC,EAAcJ,GAAIA,EAAItB,KAAMA,EAAMc,MAAOA,EACvDC,SAAUA,EAAUT,YAAaA,EAAaC,SAAUA,EAAUF,KAAMA,MAGvF,EAED,IAEAQ,EAAUe,aAAe,CACrBvB,KAAM,OACNE,UAAU,E,kECId,IAvBgB,SAAC,GAA8C,IAA7CC,EAA4C,EAA5CA,SAAUT,EAAkC,EAAlCA,aAAkC,IAApB8B,QAAAA,OAAoB,SAC1D,GAA0BC,EAAAA,EAAAA,WAAS,UAAI/B,IAAvC,eAAOW,EAAP,KAAcqB,EAAd,KAmBA,MAAO,CAACrB,MAAAA,EAAOqB,SAAAA,EAAUpB,aAjBJ,SAAC,GAAc,IAAbqB,EAAY,EAAZA,OACXhC,EAA+BgC,EAA/BhC,KAAMc,EAAyBkB,EAAzBlB,MAAOT,EAAkB2B,EAAlB3B,KAAM4B,EAAYD,EAAZC,QACrBC,EAAoB,aAAT7B,EAAsB4B,EAAUnB,EACjDiB,GAAS,SAAAI,GAAS,yBACXA,GADW,cAEbnC,EAAOkC,GAFM,GAIrB,EAUsCtB,aARlB,SAACwB,GAClBA,EAAEC,iBACF7B,GAAS,UAAIE,IACVmB,GACCE,GAAS,UAAIhC,GAEpB,EAGJ,C","sources":["modules/RegisterForm/initialState.js","modules/RegisterForm/fields.js","modules/RegisterForm/RegisterForm.jsx","pages/RegisterPage/RegisterPage.jsx","webpack://react-homework-template/./src/shared/components/TextField/text-field.module.css?f04f","shared/components/TextField/Textfield.jsx","shared/hooks/useForm.js"],"sourcesContent":["export const initialState = {\n    name: \"\",\n    email: \"\",\n    password: \"\"\n}","export const fields = {\n    name: {\n        label: \"Name\",\n        name: \"name\",\n        type: \"text\",\n        placeholder: \"Input name\",\n        required: true,\n    },\n    email: {\n        label: \"Email\",\n        name: \"email\",\n        type: \"email\",\n        placeholder: \"Input email\",\n        required: true,\n    },\n    password: {\n        label: \"Password\",\n        name: \"password\",\n        type: \"password\",\n        placeholder: \"Input password\",\n        required: true,\n    },\n}","import useForm from \"../../shared/hooks/useForm\";\n\nimport TextField from \"../../shared/components/TextField\";\n\nimport { initialState } from \"./initialState\";\nimport { fields } from \"./fields\";//из ResgisterForma \nimport Button from \"shared/components/Button\";\n\nconst RegisterForm = ({ onSubmit }) => {\n    const { state, handleChange, handleSubmit } = useForm({ onSubmit, initialState });\n\n    const { name, email, password } = state;\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <TextField value={name} onChange={handleChange} {...fields.name} />\n            <TextField value={email} onChange={handleChange} {...fields.email} />\n            <TextField value={password} onChange={handleChange} {...fields.password} />\n            <Button text=\"Register\" type=\"submit\">Register</Button>\n        </form>\n    )\n}\n\nexport default RegisterForm;","import RegisterForm from 'modules/RegisterForm';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { signup } from '../../redux/auth/auth-operation.js';\n\n\nfunction RegisterPage() {\n    const dispatch = useDispatch();\n    // console.log(signup);\n    const onSignup = (data) => {\n        // console.log(data);\n        dispatch(signup(data));\n    }\n\n    return (\n        <main>\n            <h1> Register page</h1>\n            <RegisterForm onSubmit={onSignup} />\n        </main>\n    )\n}\n\nexport default RegisterPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"block\":\"text-field_block__JkCnA\",\"label\":\"text-field_label__VYX-y\",\"input\":\"text-field_input__YM8fs\"};","import { useMemo } from \"react\";\nimport { nanoid } from \"@reduxjs/toolkit\";\n\nimport styles from \"./text-field.module.css\";\n\nconst TextField = ({ label, name, value, onChange, placeholder, required, type }) => {\n    const id = useMemo(() => nanoid(), []);//при первом рендере будет создана айди юсмемо что бы каждый раз не пересоздавалась фция \n\n    return (\n        <div className={styles.block}>\n            {label && <label className={styles.label} htmlFor={id}>{label}: </label>}\n            <input className={styles.input} id={id} name={name} value={value}\n                onChange={onChange} placeholder={placeholder} required={required} type={type} />\n        </div>\n    )\n}\n\nexport default TextField;\n\nTextField.defaultProps = {\n    type: \"text\",\n    required: false,\n}","import {useState} from \"react\";\n\nconst useForm = ({onSubmit, initialState, isReset = true}) => {\n    const [state, setState] = useState({...initialState});\n\n    const handleChange = ({target}) => {\n        const { name, value, type, checked } = target;\n        const newValue = type === \"checkbox\" ? checked : value;\n        setState(prevState => ({\n            ...prevState,\n            [name]: newValue\n        }))\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        onSubmit({...state});\n        if(isReset) {\n            setState({...initialState})\n        }\n    };\n\n    return {state, setState, handleChange, handleSubmit};\n}\n\nexport default useForm;\n"],"names":["initialState","name","email","password","fields","label","type","placeholder","required","onSubmit","useForm","state","handleChange","handleSubmit","TextField","value","onChange","Button","text","dispatch","useDispatch","data","signup","id","useMemo","nanoid","className","styles","htmlFor","defaultProps","isReset","useState","setState","target","checked","newValue","prevState","e","preventDefault"],"sourceRoot":""}